{{- if .GenerateClient }}
	{{ reserveImport "bytes" }}
	{{ reserveImport "context" }}
	{{ reserveImport "encoding/json" }}
	{{ reserveImport "fmt" }}
	{{ reserveImport "io" }}
	{{ reserveImport "io/ioutil" }}
	{{ reserveImport "net/http" }}
	{{ reserveImport "net/url" }}
	{{ reserveImport "path" }}
	{{ reserveImport "time" }}


	{{ reserveImport "github.com/Yamashou/gqlgenc/graphqljson" }}
	{{ reserveImport "github.com/Yamashou/gqlgenc/client" }}

	//easyjson:skip
	type Client struct {
		Client *client.Client
	}

	func NewClient(
	    clientPool client.ClientPool,
	    options []client.HTTPRequestOption,
	    callbacks []client.HTTPResponseCallback,
	) *Client {
		return &Client{Client: client.NewClient(clientPool, options, callbacks)}
	}
{{- end }}

type {{ .Query.Name | go }} {{ .Query.Type | ref }}

{{- if .Mutation }}
	type {{ .Mutation.Name | go }} {{ .Mutation.Type | ref }}
{{- end }}

{{- range $name, $element := .Fragment }}
	type  {{ .Name | go  }} {{ .Type | ref }}
{{- end }}

{{- range $name, $element := .OperationResponse }}
    type  {{ .Name | go  }} {{ .Type | ref }}
{{- end }}

{{- range $model := .Operation}}
	const {{ $model.Name|go }}Document = `{{ $model.Operation }}`

	{{- if $.GenerateClient }}
		func (c *Client) {{ $model.Name|go }} (
	    	ctx context.Context,
	    	out *{{ $model.ResponseStructName | go }}{{- range $arg := .Args }},
	    	{{ $arg.Variable | goPrivate }} {{ $arg.Type | ref }} {{- end }},
	    	httpRequestOptions []client.HTTPRequestOption,
    		httpResponseCallbacks []client.HTTPResponseCallback,
		) error {
			vars := map[string]interface{}{
			{{- range $args := .VariableDefinitions}}
				"{{ $args.Variable }}": {{ $args.Variable | goPrivate }},
			{{- end }}
			}

			if err := c.Client.Post(ctx, "{{ $model.Name }}", {{ $model.Name|go }}Document, out, vars, "{{ .Hash }}", httpRequestOptions, httpResponseCallbacks); err != nil {
        		return err
    		}

			return nil
		}
	{{- end}}
{{- end}}
